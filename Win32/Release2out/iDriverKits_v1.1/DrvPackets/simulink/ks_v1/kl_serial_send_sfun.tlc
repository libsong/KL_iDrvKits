%% File : kl_serial_send_sfun.tlc
%% Created: Mon Apr 23 15:50:51 2018
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "kl_serial_send_sfun.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  kl_serial_send_sfun "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void kl_serial_send_sfun_Start_wrapper(const real_T *u0,
                          const real_T *u1,
                          const real_T *u2,
                          real_T *y0,
                          real_T *y1,
                          real_T *y2  , 
                          const real_T  *ctlid, const int_T  p_width0, 
                          const real_T  *baud, const int_T  p_width1, 
                          const real_T  *lenbit, const int_T  p_width2, 
                          const real_T  *paritybit, const int_T  p_width3, 
                          const real_T  *stopbit, const int_T  p_width4, 
                          const real_T  *parityenbale, const int_T  p_width5, 
                          const real_T  *mode, const int_T  p_width6, 
                          const real_T  *choosewrongdata, const int_T  p_width7, 
                          const real_T  *sendchl, const int_T  p_width8, 
                          const real_T  *resv0, const int_T  p_width9, 
                          const real_T  *resv1, const int_T  p_width10, 
                          const real_T  *resv2, const int_T  p_width11, 
                          const real_T  *resv3,  const int_T p_width12,
			     const int_T y_width, const int_T u_width);
  extern void kl_serial_send_sfun_Outputs_wrapper(const real_T *u0,
                          const real_T *u1,
                          const real_T *u2,
                          real_T *y0,
                          real_T *y1,
                          real_T *y2  , 
                          const real_T  *ctlid, const int_T  p_width0, 
                          const real_T  *baud, const int_T  p_width1, 
                          const real_T  *lenbit, const int_T  p_width2, 
                          const real_T  *paritybit, const int_T  p_width3, 
                          const real_T  *stopbit, const int_T  p_width4, 
                          const real_T  *parityenbale, const int_T  p_width5, 
                          const real_T  *mode, const int_T  p_width6, 
                          const real_T  *choosewrongdata, const int_T  p_width7, 
                          const real_T  *sendchl, const int_T  p_width8, 
                          const real_T  *resv0, const int_T  p_width9, 
                          const real_T  *resv1, const int_T  p_width10, 
                          const real_T  *resv2, const int_T  p_width11, 
                          const real_T  *resv3,  const int_T p_width12,
			     const int_T y_width, const int_T u_width);
  extern void kl_serial_send_sfun_Terminate_wrapper(const real_T *u0,
                          const real_T *u1,
                          const real_T *u2,
                          real_T *y0,
                          real_T *y1,
                          real_T *y2  , 
                          const real_T  *ctlid, const int_T  p_width0, 
                          const real_T  *baud, const int_T  p_width1, 
                          const real_T  *lenbit, const int_T  p_width2, 
                          const real_T  *paritybit, const int_T  p_width3, 
                          const real_T  *stopbit, const int_T  p_width4, 
                          const real_T  *parityenbale, const int_T  p_width5, 
                          const real_T  *mode, const int_T  p_width6, 
                          const real_T  *choosewrongdata, const int_T  p_width7, 
                          const real_T  *sendchl, const int_T  p_width8, 
                          const real_T  *resv0, const int_T  p_width9, 
                          const real_T  *resv1, const int_T  p_width10, 
                          const real_T  *resv2, const int_T  p_width11, 
                          const real_T  *resv3,  const int_T p_width12,
			     const int_T y_width, const int_T u_width);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Start =============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
   
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0) 
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
    
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif 
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]  
  %if (param_width2) > 1  
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else  
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif 
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]  
  %if (param_width3) > 1  
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else  
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif 
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]  
  %if (param_width4) > 1  
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else  
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif 
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]  
  %if (param_width5) > 1  
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else  
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif 
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]  
  %if (param_width6) > 1  
   %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else  
   %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif 
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]  
  %if (param_width7) > 1  
   %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
  %else  
   %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
  %endif 
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]  
  %if (param_width8) > 1  
   %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
  %else  
   %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
  %endif 
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]  
  %if (param_width9) > 1  
   %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
  %else  
   %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
  %endif 
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]  
  %if (param_width10) > 1  
   %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
  %else  
   %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
  %endif 
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]  
  %if (param_width11) > 1  
   %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
  %else  
   %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
  %endif 
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]  
  %if (param_width12) > 1  
   %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
  %else  
   %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
  %endif 
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]  
  %if (param_width13) > 1  
   %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
  %else  
   %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
  %endif
   %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  kl_serial_send_sfun_Start_wrapper(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>,  %<pp8>, %<param_width8>,  %<pp9>, %<param_width9>,  %<pp10>, %<param_width10>,  %<pp11>, %<param_width11>,  %<pp12>, %<param_width12>, %<pp13>, %<param_width13>, %<py_width>, %<pu_width>);


%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
     %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
   %else
     %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
   %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
     %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
   %else
     %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
   %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1
     %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
   %else
     %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
   %endif
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]
  %if (param_width9) > 1
     %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
   %else
     %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
   %endif
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]
  %if (param_width10) > 1
     %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
   %else
     %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
   %endif
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]
  %if (param_width11) > 1
     %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
   %else
     %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
   %endif
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]
  %if (param_width12) > 1
     %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
   %else
     %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
   %endif
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]
  %if (param_width13) > 1
     %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
   %else
     %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  kl_serial_send_sfun_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>,  %<pp8>, %<param_width8>,  %<pp9>, %<param_width9>,  %<pp10>, %<param_width10>,  %<pp11>, %<param_width11>,  %<pp12>, %<param_width12>, %<pp13>, %<param_width13>, %<py_width>, %<pu_width>);

  %%
%endfunction


%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
%assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
     %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
   %else
     %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
   %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
     %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
   %else
     %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
   %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1
     %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
   %else
     %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
   %endif
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]
  %if (param_width9) > 1
     %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
   %else
     %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
   %endif
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]
  %if (param_width10) > 1
     %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
   %else
     %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
   %endif
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]
  %if (param_width11) > 1
     %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
   %else
     %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
   %endif
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]
  %if (param_width12) > 1
     %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
   %else
     %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
   %endif
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]
  %if (param_width13) > 1
     %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
   %else
     %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  kl_serial_send_sfun_Terminate_wrapper(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>,  %<pp8>, %<param_width8>,  %<pp9>, %<param_width9>,  %<pp10>, %<param_width10>,  %<pp11>, %<param_width11>,  %<pp12>, %<param_width12>, %<pp13>, %<param_width13>, %<py_width>, %<pu_width>);

%endfunction

%% [EOF] kl_serial_send_sfun.tlc





